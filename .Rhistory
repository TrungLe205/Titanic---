names(x.dat)
# 3.First 10 rows
x.dat[1:10, ]
# First 5 columns
x.dat[,1:5]
# First 7 rows and 6 columns
x.dat[1:7, 1:6]
# 4. Table of Family.Size
table(x.dat$Family.Size)
# 5. Horizontal bar chart for Education
barplot(table(x.dat$Education), horiz = T)
# 6. Make the chart look nicer
barplot(table(x.dat$Education), horiz = T, main = "Barplot of Education")
# 7. Boxplot of Income variable
boxplot(x.dat$Income, horizontal=T, main = "Boxplot of Income")
# The boxplot shown the Median value (line inside the box), the value of 1st Quartile and 3rd Quartile
# that is the left-side and the right-side of the box, the minimum and maximun limits, the whiskers
# and outliers
# 8. Hist of age variable
hist(table(x.dat$Age), col = "Green")
# Most of the bank's customers aged from 60 to 70
# 9. Boxplot of Credit Card Avg conditional on the value of the Personal Loan
boxplot(x.dat$Credit.Card.Avg ~ x.dat$Personal.Loan)
# The range is larger for people that accepted Personal Loan (second plot)
# There are more outliers in the first box
# 10. Scatter plot
plot(x.dat$Credit.Card.Avg, x.dat$Personal.Loan)
# The plot is not useful cause Personal.Loan is binary variable
# 11. install " lattice"
install.packages("lattice")
library(lattice)
# 12. creating histogram of Income variable
histogram(~Income, data = x.dat)
# 13. creating histogram of Income variable conditional on the Personal Loan
histogram(~Income | Personal.Loan, data = x.dat)
# Those who accept Personal Loan has higher income than those who don't accept it
# 14. create x2.dat new data frame
x2.dat <- subset(x.dat, select = (-Education))
# 15. Descriptive statistical
summary(x2.dat[,2:14])
# 16. Compute correlations statistical for all variables
cor(x2.dat)
?cor
cor(x2.dat, x2.dat$Personal.Loan)
# Strongly correlated variables with Personal Loan: Income (0.52), Credit.Card.Avg(0.38), CD.Account(0.34)
# 17. Create data set x3.dat
x3.dat <- x.dat[, c("Income", "Credit.Card.Avg", "CD.Account", "Personal.Loan")]
# 18. Plot x3.dat
plot(x3.dat)
# Its not helpful to shown cor because Personal.Loan is binary variable.
# 19. In order to predict which types of customer consider Personal.Loan, we need to look
# at Income variable first cause it has strong cor with Personal.Loan variable compare with others
install.packages("lattice")
histogram(~Income | Personal.Loan, data = x.dat)
setwd("/Users/trungle/Documents/CHAPMAN/BUS 696 - R PROGRAM/HW 1")
x.dat <- read.csv("hw1_universal_bank_data.csv")
histogram(~Income | Personal.Loan, data = x.dat)
library(lattice)
histogram(~Income | Personal.Loan, data = x.dat)
boxplot(x.dat$Credit.Card.Avg ~ x.dat$Personal.Loan)
setwd("~/Documents/DATA SCIENTIST/Titanic")
train = read.csv("train.csv")
test = read.csv("test.csv)"
test = read.csv("test.csv")
test = read.csv("test.csv")
str(train)
Survived <- train$Survived
train <- subset(train, select = -(Survived))
data = rbind(train,test)
data <- subset(data, select = -(Name))
summary(data)
str(data)
data$Pclass = as.factor(data$Pclass)
data$SibSp = as.factor(data$SibSp)
data$Parch <- as.factor(data$Parch)
summary(data)
str(data)
data$Ticket <- as.character(data$Ticket)
data$Cabin <- as.character(data$Cabin)
str(data)
library(mice)
temData <- mice(data, m=5, maxit = 10)
fullData <- complete(temData)
train <- fullData[1:891,]
test <- fullData[892:1309,]
train <- cbind(train, Survived)
library(randomForest)
RF = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 1000, nodesize = 200)
pred = predict(RF, newdata = test)
MySubmission = data.frame(PassengerId = test$PassengerId, Predictions = pred)
write.csv(MySubmission, "RF.csv", row.names =FALSE)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred)
write.csv(MySubmission, "RF.csv", row.names =FALSE)
str(train)
train$Survived <- as.factor(train$Survived)
RF = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 1000, nodesize = 200)
pred = predict(RF, newdata = test)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred)
write.csv(MySubmission, "RF.csv", row.names =FALSE)
?if
?if
?if
?If
?Elseif
?elseif
hist(train$Age)
If (Age <= 10)
print ("Under 10")
elseif (Age >10 & Age <= 20 )
print ("Under 20")
elseif (Age >20 & Age <=30 )
print("Under 30")
If (Age <= 10)
print ("Under 10")
else if (Age >10 & Age <= 20 )
print ("Under 20")
else if (Age >20 & Age <=30 )
print("Under 30")
RF = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, ntree = 20000, nodesize = 200)
pred = predict(RF, newdata = test)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred)
write.csv(MySubmission, "RF.csv", row.names =FALSE)
RF = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Pclass:Sex + Pclass:Age + Age:Sex, data = train, ntree = 20000, nodesize = 200)
pred = predict(RF, newdata = test)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred)
write.csv(MySubmission, "RF.csv", row.names =FALSE)
train1 = read.csv("train.csv")
Name <- train1$Name
train <- cbind(Name, train)
rm(train1)
View(train)
test1 <- test.csv("test.csv")
test1 <- read.csv("test.csv")
Name <- test1$Name
test <- cbind(test, Name)
rm(test1)
train <- subset(train, select = (-Survived))
fullData <- rbind(train, test)
?gsub
fullData$Title <- gsub('(. * ,)|(\\..*)', '', fullData$Name)
fullData$Title <- gsub('(. * ,)|(\\..*)', '', fullData$Name)
table(fullData$Sex, fullData$Title)
str(fullData)
View(fullData)
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[,1] +2
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[,1] +2, str_locate(fullData$Name, "\\.")[,1] - 1)
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[ , 1] + 2, str_locate(fullData$Name, "\\.")[ , 1] - 1)
library(stringr)
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[ , 1] + 2, str_locate(fullData$Name, "\\.")[ , 1] - 1)
View(fullData)
fullData <- subset(fullData, select =(-Title))
View(fullData)
?str_sub
table(fullData$title, fullData$Sex)
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[ , 1] + 3, str_locate(fullData$Name, "\\.")[ , 1] - 1)
View(fullData)
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[ , 1] + 2, str_locate(fullData$Name, "\\.")[ , 1] - 1)
View(fullData)
male_noble_names <- c("Capt", "Col", "Don", "Dr", "Jonkheer", "Major", "Rev", "Sir")
train$title[train$title %in% male_noble_names] <- "male_noble"
fullData$title[fullData$title %in% male_noble_names] <- "male_noble"
female_noble_names <- c("Lady", "Mlle", "Mme", "Ms", "the Countess")
fullData$title[fullData$title %in% female_noble_names] <- "female_noble"
View(fullData)
train <- fullData[1:891,]
test <- fullData[892:1309,]
train <- cbind(train, Survived)
RF1 = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, ntree = 20000)
summary(train)
str(train)
train$Survived <- as.factor(train$Survived)
RF1 = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, ntree = 20000)
train$title <- as.factor(train$title)
RF1 = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, ntree = 20000)
pred1 = predict(RF1, newdata = test)
str(test)
test$title <- as.factor(test$title)
pred1 = predict(RF1, newdata = test)
str(train)
pred1 = predict(RF1, newdata = test)
test$title <- as.character(test$title)
pred1 = predict(RF1, newdata = test)
str(test)
str(fullData)
fullData$title <- as.factor(fullData$title)
train <- fullData[1:891,]
test <- fullData[892:1309,]
train <- cbind(train, Survived)
train$Survived <- as.factor(train$Survived)
RF1 = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, ntree = 20000)
1
pred1 = predict(RF1, newdata = test)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred1)
write.csv(MySubmission, "RF1.csv", row.names =FALSE)
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[ , 1] + 2, str_locate(fullData$Name, "\\.")[ , 1] - 1)
View(fullData)
View(fullData)
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[ , 1] + 2, str_locate(fullData$Name, "\\.")[ , 1] - 1)
fullData <- subset(fullData, select =(-Title))
table(fullData$title, fullData$Sex)
male_noble_names <- c("Capt", "Col", "Don", "Dr", "Jonkheer", "Major", "Rev", "Sir")
fullData$title[fullData$title %in% male_noble_names] <- "male_noble"
female_noble_names <- c("Lady", "Mlle", "Mme", "Ms", "the Countess")
fullData$title[fullData$title %in% female_noble_names] <- "female_noble"
str(fullData)
fullData$title <- as.factor(fullData$title)
library(caret)
library(e1071)
numFolds <- trainControl(method = "cv", number = 10)
cpGrid <- expand.grid(.cp = seq(0.002, 0.01, 0.002))
train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
library(rpart)
library(rpart.plot)
rpart = rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, method = "class", cp = 0.002)
prp(rpart)
pred2 <- predict(rpart, newdata = test, type = "class")
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred2)
write.csv(MySubmission, "RPART.csv", row.names =FALSE)
hist(train$title, train$Survived)
table(train$title, train$Survived)
setwd("~/Documents/CHAPMAN/BUS 696 - R PROGRAM/HW 2")
x.dat <- read.csv("hw2_college_fixed.csv")
names(x.dat)
y.grad.rate <- x.dat$Grad.Rate
x.matrix <- x.dat[,3:18]
View(x.dat)
reg1 <- lm(Grad.Rate ~ Top10perc, data = x.dat)
summary(reg1)
predict <- predict(reg1)
predict <- predict(reg1, data = x.dat)
View(x.dat)
View(x.dat)
SSE <- sum(predict - x.dat$Grad.Rate)^2
SSR <- sum(predict - mean(x.dat$Grad.Rate))^2
m <- 500
train <- sample(1:nrow(x.dat), m)
?sample
y1.grad.rate <- y.grad.rate[train]
train1 <- sample(x.dat, 500)
train1 <- sample(x.dat, 500, replace = F)
x1.dat <- x.dat[train,]
train[1:20,]
train[1:20,]
head(train)
head(train, n = 20)
reg2 <- lm(Grad.Rate ~ Top10perc, data = x1.dat)
summary(reg1)
m <- 500
train <- sample(1:nrow(x.dat), m)
y1.grad.rate <- y.grad.rate[train]
x1.dat <- x.dat[train,]
head(train, n = 20)
reg2 <- lm(Grad.Rate ~ Top10perc, data = x1.dat)
summary(reg1)
summary(reg2)
setwd("~/Documents/CHAPMAN/BUS 696 - R PROGRAM/HW 3")
x.dat <- read.csv("hw3_banksal_adjusted.csv")
str(x.dat)
dat <- read.csv("hw3_banksal_adjusted.csv")
dat$Gender <- as.numeric(dat$Gender)
dat$Gender <- as.factor(dat$Gender)
dat$Gender <- as.factorstr(dat)(dat$Gender)
str(dat)
dat$Gender <- as.numeric(dat$Gender)
str(dat)
dat$Techjob <- as.numeric(dat$Techjob) - 1
dat$TechJob <- as.numeric(dat$TechJob) - 1
level <- factor(dat$EducLev)
newdat <- data.frame(model.,atrix(~level-1))
newdat <- data.frame(model.matrix(~level-1))
dat$EducLev[1:10]
str(dat)
dat$JobGrade <- as.factor(dat$JobGrade)
level <- factor(dat$EducLev)
dat$EducLev <- factor(dat$EducLev)
str(dat)
dat$Gender <- as.numeric(dat$Gender) -1
str(dat)
str(dat)
reg <- lm(Salary~., data = dat)
dat$Salary <- as.numeric(dat$Salary)
reg <- lm(Salary~., data = dat)
summary(reg)
str(dat)
dat$YrsExper <- as.numeric(dat$YrsExper)
dat$Age <- as.numeric(dat$Age)
dat$YrsPrior <- as.numeric(dat$YrsProor)
dat$YrsPrior <- as.numeric(dat$YrsPrior)
reg <- lm(Salary~., data = dat)
summary(dat)
summary(reg)
reg <- lm(Salary~.- Employee, data = dat)
summary(reg)
View(dat)
dat$Salary <- as.numeric(dat$Salary)*1000
View(dat)
View(dat)
reg <- lm(Salary~.- Employee, data = dat)
summary(dat)
summary(reg)
hist(dat$JobGrade, dat$Salary)
table(dat$JobGrade, dat$Salary)
summary(reg)
str(dat)
dat <- read.csv("hw3_banksal_adjusted.csv")
str(x.dat)
dat$Gender <- as.numeric(dat$Gender) -1
str(dat)
dat$TechJob <- as.numeric(dat$TechJob) - 1
dat$EducLev <- factor(dat$EducLev)
str(dat)
dat$JobGrade <- as.factor(dat$JobGrade)
str(dat)
dat$Salary <- as.numeric(dat$Salary)
reg <- lm(Salary~., data = dat)
summary(reg)
str(dat)
dat$YrsExper <- as.numeric(dat$YrsExper)
dat$Age <- as.numeric(dat$Age)
dat$YrsPrior <- as.numeric(dat$YrsPrior)
reg <- lm(Salary~.- Employee, data = dat)
summary(reg)
dat <- read.csv("hw3_banksal_adjusted.csv")
str(x.dat)
dat$Gender <- as.numeric(dat$Gender) -1
str(dat)
dat$TechJob <- as.numeric(dat$TechJob) - 1
dat$EducLev <- factor(dat$EducLev)
str(dat)
dat$JobGrade <- as.factor(dat$JobGrade)
str(dat)
dat$Salary <- as.numeric(dat$Salary)
reg <- lm(Salary~., data = dat)
summary(reg)
str(dat)
dat$YrsExper <- as.numeric(dat$YrsExper)
dat$Age <- as.numeric(dat$Age)
dat$YrsPrior <- as.numeric(dat$YrsPrior)
reg <- lm(Salary~.- Employee, data = dat)
summary(reg)
library(leaps)
install.packages(leaps)
install.packages("leaps")
library(leaps)
?lm
train <- read.csv("train.csv")
test <- read.csv("test.csv")
str(train)
Survived <- train$Survived
train <- subset(train, select = -(Survived))
setwd("~/Documents/DATA SCIENTIST/Titanic")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
str(train)
Survived <- train$Survived
train <- subset(train, select = -(Survived))
data <- rbind(train,test)
# Take name variable out
data <- subset(data, select = -(Name))
summary(data)
str(data)
# Transform variable
data$Pclass <- as.factor(data$Pclass)
data$SibSp <- as.factor(data$SibSp)
data$Parch <- as.factor(data$Parch)
str(data)
data$Ticket <- as.character(data$Ticket)
data$Cabin <- as.character(data$Cabin)
str(data)
# Imputation to data
library(mice)
temData <- mice(data, m=5, maxit = 10)
fullData <- complete(temData)
train <- fullData[1:891,]
test <- fullData[892:1309,]
train <- cbind(train, Survived)
train$Survived <- as.factor(train$Survived)
train1 <- read.csv("train.csv")
Name <- train1$Name
train <- cbind(Name, train)
rm(train1)
test1 <- read.csv("test.csv")
Name <- test1$Name
test <- cbind(test, Name)
rm(test1)
train <- subset(train, select = (-Survived))
fullData <- rbind(train, test)
fullData$Title <- gsub('(. * ,)|(\\..*)', '', fullData$Name)
table(fullData$Sex, fullData$Title)
str(fullData)
library(stringr)
fullData$title <- str_sub(fullData$Name, str_locate(fullData$Name, ",")[ , 1] + 2, str_locate(fullData$Name, "\\.")[ , 1] - 1)
# Another way extract title: strsplit(combi$Name[1], split='[,.]')[[1]][2]
# combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
# combi$Title <- sub(' ', '', combi$Title)
# http://trevorstephens.com/kaggle-titanic-tutorial/r-part-4-feature-engineering/
fullData <- subset(fullData, select =(-Title))
table(fullData$title, fullData$Sex)
male_noble_names <- c("Capt", "Col", "Don", "Dr", "Jonkheer", "Major", "Rev", "Sir")
fullData$title[fullData$title %in% male_noble_names] <- "male_noble"
female_noble_names <- c("Lady", "Mlle", "Mme", "Ms", "the Countess")
fullData$title[fullData$title %in% female_noble_names] <- "female_noble"
str(fullData)
fullData$title <- as.factor(fullData$title)
# Randomforest model 1
train <- fullData[1:891,]
test <- fullData[892:1309,]
train <- cbind(train, Survived)
train$Survived <- as.factor(train$Survived)
RF1 = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, ntree = 20000)
pred1 = predict(RF1, newdata = test)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred1)
write.csv(MySubmission, "RF1.csv", row.names =FALSE)
# ACC = 0.79426 rank = 1347
# Tree model
library(caret)
numFolds <- trainControl(method = "cv", number = 10)
train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
library(rpart.plot)
prp(rpart)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred2)
# ACC = 0.77
rpart <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title, data = train, method = "class", cp = 0.002)
pred2 <- predict(rpart, newdata = test, type = "class")
library(e1071)
library(rpart)
write.csv(MySubmission, "RPART.csv", row.names =FALSE)
cpGrid <- expand.grid(.cp = seq(0.002, 0.01, 0.002))
View(fullData)
name(fullData)
names(fullData)
strsplit(fullData$Name, split = '[,.]')
strsplit(fullData$Name[1], split='[,.]')
fullData$Name <- as.character(fullData$Name)
strsplit(fullData$Name, split = '[,.]')
strsplit(fullData$Name, split = '[,.]')[1]
strsplit(fullData$Name, split = '[,.]')[[1]]
strsplit(fullData$Name, split = '[,.]')[[1]][1]]
strsplit(fullData$Name, split = '[,.]')[[1]][1]
fullData$Surname <- sapply(fullData$Name, FUN = function(x) {x, split = '[,.]')[[1]][1]}
fullData$Surname <- sapply(fullData$Name, FUN = function(x) {x, split = '[,.]')[[1]][1]})
fullData$Surname <- sapply(fullData$Name, FUN = function(x) {strsplit(x, split = '[,.]')[[1]][1]})
View(fullData)
fullData$Fsize <- fullData$SibSp + fullData$Parch
fullData$SibSp <- as.numeric(fullData$SibSp)
fullData$Parch <- as.numeric(fullData$Parch)
fullData$Fsize <- fullData$SibSp + fullData$Parch
fullData$Fsize <- fullData$SibSp + fullData$Parch + 1
fullData$Family <- paste(fullData$Surname, fullData$Fsize, sep = '_')
View(fullData)
library(ggplot)
library(ggplots)
library(ggplot2)
?ggplot
ggplot(fullData[1:891,], aes(x = Fsize, fill = "Survived"))
ggplot(fullData[1:891,], aes(x = Fsize, fill = "Survived")) + geom_bar(stat = 'count', position = 'dodge')
ggplot(fullData[1:891,], aes(x = Fsize, fill = factor("Survived")) + geom_bar(stat = 'count', position = 'dodge')
ggplot(fullData[1:891,], aes(x = Fsize, fill = factor("Survived"))) + geom_bar(stat = 'count', position = 'dodge')
View(fullData)
fullData$FsizeD[fullData$Fsize == 1] <- 'single''
fullData$FsizeD[fullData$Fsize == 1] <- 'single'
fullData$FsizeD[fullData$Fsize > 1 & fullData$Fsise < 5] <- 'small'
fullData$FsizeD[fullData$Fsize > 4 ] <- 'large'
View(fullData)
fullData$FsizeD[fullData$Fsize == 1] <- 'single'
View(fullData)
View(fullData)
table(fullData$Fsize)
fullData$Fsize <- (fullData$SibSp -1) + (fullData$Parch-1) + 1
fullData$Family <- paste(fullData$Surname, fullData$Fsize, sep = '_')
fullData$FsizeD[fullData$Fsize == 1] <- 'single'
fullData$FsizeD[fullData$Fsize > 1 & fullData$Fsise < 5] <- 'small'
fullData$FsizeD[fullData$Fsize > 4 ] <- 'large'
table(fullData$Fsize)
View(fullData)
fullData$FsizeD[fullData$Fsize > 1 & fullData$Fsise < 5] <- 'small'
View(fullData)
fullData$FsizeD[fullData$Fsize > 1 & fullData$Fsise <= 4] <- 'small'
fullData$FsizeD[fullData$Fsize >=5 ] <- 'large'
View(fullData)
fullData$FsizeD[fullData$Fsize > 1 && fullData$Fsise <= 4] <- 'small'
View(fullData)
fullData$FsizeD[fullData$Fsize > 1 && fullData$Fsize <= 4] <- 'small'
fullData$FsizeD[fullData$Fsize >=5 ] <- 'large'
View(fullData)
train <- fullData[1:891,]
str(fullData)
test <- fullData[892:1309,]
train <- cbind(train, Survived)
fullData$Fsized <- as.factor(fullData$FsizeD)
train <- fullData[1:891,]
test <- fullData[892:1309,]
train <- cbind(train, Survived)
View(test)
RF2 = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title + Fsized, data = train, ntree = 20000)
pred2 = predict(RF2, newdata = test)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred2)
write.csv(MySubmission, "RF2.csv", row.names =FALSE)
train$Survived <- as.factor(train$Survived)
RF2 = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title + Fsized, data = train, ntree = 20000)
pred2 = predict(RF2, newdata = test)
MySubmission = data.frame(PassengerId = test$PassengerId, Survived = pred2)
write.csv(MySubmission, "RF2.csv", row.names =FALSE)
importantce <- importance(RF2)
View(importantce)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, 'MeanDecreaseGini'],2))
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, "MeanDecreaseGini"],2))
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'MeanDecreaseGini'],2))
Importance = round(importance[ ,'MeanDecreaseGini'],2))
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[ ,'MeanDecreaseGini'],2))
